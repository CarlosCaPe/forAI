USE MaxiDev;

GO


BEGIN TRY
    DECLARE @IdCountryCurrency INT,
            @StartDate DATE,
            @EndDate DATE,
            @Range1 DECIMAL(18, 2),
            @Range2 DECIMAL(18, 2),
            @State NVARCHAR(50),
            @ReportCorpType INT;

    SET @IdCountryCurrency = 1;
    SET @StartDate = '2023-01-01';
    SET @EndDate = '2023-06-01';
    SET @Range1 = NULL;
    SET @Range2 = NULL;
    SET @State = NULL;
    SET @ReportCorpType = 1;


    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    DROP TABLE IF EXISTS #Transfer,
                         #TransferRejected,
                         #TransferExpired,
                         #TransferClosedCancel,
                         #TransferClosed,
                         #TransferUnclaimed,
                         #TransferClosedUnclaimed,
                         #AgentBalance,
                         #Agent,
                         #AgentOtherCharge,
                         #AgentCollectionDetail,
                         #CountryCurrency,
                         #AgentCollection,
                         #Users,
                         #SpecialCommissionBalance,
                         #PosTransfer,
                         #OtherCharges;




    SELECT *
    INTO #Transfer
    FROM dbo.Transfer
    WHERE IdCountryCurrency = CASE
                                  WHEN @IdCountryCurrency = 0 THEN
                                      IdCountryCurrency
                                  ELSE
                                      @IdCountryCurrency
                              END
          AND DateOfTransfer > @StartDate
          AND DateOfTransfer < @EndDate
          OR (
                 DateStatusChange > @StartDate
                 AND DateStatusChange < @EndDate
                 AND IdStatus IN ( 31, 22, 27 )
             )
             AND
             (
                 (
                     @Range1 IS NULL
                     AND @Range2 IS NULL
                 )
                 OR AmountInDollars
          BETWEEN @Range1 AND @Range2
             );




    SELECT IdAgent,
           IdCountryCurrency,
           DateOfTransfer,
           DateStatusChange,
           IdStatus,
           AmountInDollars
    INTO #TransferClosed
    FROM dbo.TransferClosed
    WHERE IdCountryCurrency = CASE
                                  WHEN @IdCountryCurrency = 0 THEN
                                      IdCountryCurrency
                                  ELSE
                                      @IdCountryCurrency
                              END
          AND DateOfTransfer > @StartDate
          AND DateOfTransfer < @EndDate
          OR (
                 DateStatusChange > @StartDate
                 AND DateStatusChange < @EndDate
                 AND IdStatus IN ( 31, 22 )
             )
             AND
             (
                 (
                     @Range1 IS NULL
                     AND @Range2 IS NULL
                 )
                 OR AmountInDollars
          BETWEEN @Range1 AND @Range2
             );




    SELECT IdAgentBalance,
           DateOfMovement,
           TypeOfMovement
    INTO #AgentBalance
    FROM AgentBalance
    WHERE DateOfMovement >= @StartDate
          AND DateOfMovement < @EndDate
          AND
          (
              TypeOfMovement = 'CGO'
              OR TypeOfMovement = 'DEBT'
          );



    SELECT IdAgentBalance,
           IdOtherChargesMemo
    INTO #AgentOtherCharge
    FROM AgentOtherCharge
    WHERE IdOtherChargesMemo IN ( 6, 9, 13, 19, 4, 5, 11, 12, 16, 17, 18, 24, 25 );




    SELECT DateofLastChange
    INTO #AgentCollectionDetail
    FROM AgentCollectionDetail
    WHERE DateofLastChange >= @StartDate
          AND DateofLastChange < @EndDate;



    SELECT IdAgent
    INTO #AgentCollection
    FROM AgentCollection;



    SELECT IdAgent,
           DateOfApplication
    INTO #SpecialCommissionBalance
    FROM dbo.SpecialCommissionBalance
    WHERE DateOfApplication >= @StartDate
          AND DateOfApplication < @EndDate;




    SELECT IdCountryCurrency
    INTO #CountryCurrency
    FROM CountryCurrency;





    SELECT IdAgent,
           AgentName,
           AgentCode,
           IdUserSeller,
           AgentState
    INTO #Agent
    FROM Agent
    WHERE AgentState = ISNULL(@State, AgentState);



    SELECT IdUser,
           UserName
    INTO #Users
    FROM Users;




    SELECT IdTransfer,
           IdPosTransfer
    INTO #PosTransfer
    FROM PosTransfer;



    SELECT t.IdAgent,
           IdCountry,
           t.IdCountryCurrency,
           IdGateway,
           IdPayer,
           IdPaymentType,
           AmountInDollars
    INTO #TransferRejected
    FROM Transfer t
        JOIN Agent a
            ON t.IdAgent = a.IdAgent
        JOIN CountryCurrency cc
            ON t.IdCountryCurrency = cc.IdCountryCurrency
    WHERE t.IdCountryCurrency = IIF(@IdCountryCurrency = 0, t.IdCountryCurrency, @IdCountryCurrency)
          AND DateStatusChange > @StartDate
          AND DateStatusChange < @EndDate
          AND t.IdAgent IN
              (
                  SELECT IdAgent FROM #Agent
              )
          AND IdStatus = 31
          AND
          (
              (
                  @Range1 IS NULL
                  AND @Range2 IS NULL
              )
              OR AmountInDollars
          BETWEEN @Range1 AND @Range2
          );



    SELECT IdAgent,
           IdCountryCurrency,
           DateOfTransfer,
           DateStatusChange,
           IdStatus,
           AmountInDollars
    INTO #TransferExpired
    FROM dbo.Transfer
    WHERE IdCountryCurrency = CASE
                                  WHEN @IdCountryCurrency = 0 THEN
                                      IdCountryCurrency
                                  ELSE
                                      @IdCountryCurrency
                              END
          AND DateOfTransfer > @StartDate
          AND DateOfTransfer < @EndDate
          OR (
                 DateStatusChange > @StartDate
                 AND DateStatusChange < @EndDate
                 AND IdStatus IN ( 31, 22, 27 )
             )
             AND
             (
                 (
                     @Range1 IS NULL
                     AND @Range2 IS NULL
                 )
                 OR AmountInDollars
          BETWEEN @Range1 AND @Range2
             );



    SELECT IdTransferClosed,
           IdAgent,
           IdCountry,
           IdCountryCurrency,
           IdGateway,
           IdPayer,
           IdPaymentType,
           AmountInDollars
    INTO #TransferClosedCancel
    FROM TransferClosed t
    WHERE IdCountryCurrency = IIF(@IdCountryCurrency = 0, IdCountryCurrency, @IdCountryCurrency)
          AND DateStatusChange > @StartDate
          AND DateStatusChange < @EndDate
          AND IdAgent IN
              (
                  SELECT IdAgent FROM #Agent
              )
          AND IdStatus = 22
          AND
          (
              (
                  @Range1 IS NULL
                  AND @Range2 IS NULL
              )
              OR t.AmountInDollars
          BETWEEN @Range1 AND @Range2
          );



    SELECT ab.IdAgent,
           SUM(IIF(ab.DebitOrCredit = 'Credit', ab.Amount, ab.Amount * (-1))) OVER (PARTITION BY ab.IdAgent) AS OtherCharges1,
           SUM(IIF(oc.IdOtherChargesMemo IN ( 6, 9, 13, 19 ),
                   IIF(ab.DebitOrCredit = 'Credit', ab.Amount, ab.Amount * (-1)),
                   0)
              ) OVER (PARTITION BY ab.IdAgent) AS OtherChargesC1,
           SUM(IIF(oc.IdOtherChargesMemo IN ( 4, 5, 11, 12, 16, 17, 18, 24, 25 ),
                   IIF(ab.DebitOrCredit != 'Credit', ab.Amount, ab.Amount * (-1)),
                   0)
              ) OVER (PARTITION BY ab.IdAgent) AS OtherChargesD1
    INTO #OtherCharges
    FROM AgentBalance ab
        JOIN AgentOtherCharge oc
            ON ab.IdAgentBalance = oc.IdAgentBalance
               AND oc.IdOtherChargesMemo IN ( 6, 9, 13, 19, 4, 5, 11, 12, 16, 17, 18, 24, 25 )
    WHERE ab.DateOfMovement >= @StartDate
          AND ab.DateOfMovement < @EndDate
          AND
          (
              ab.TypeOfMovement = 'CGO'
              OR ab.TypeOfMovement = 'DEBT'
          );



    INSERT INTO #OtherCharges
    SELECT AC.IdAgent,
           SUM(o.AmountToPay) OVER (PARTITION BY AC.IdAgent) AS OtherCharges2,
           SUM(IIF(o.AmountToPay > 0, o.AmountToPay, 0)) OVER (PARTITION BY AC.IdAgent) AS OtherChargesC2,
           SUM(IIF(o.AmountToPay < 0, o.AmountToPay * (-1), 0)) OVER (PARTITION BY AC.IdAgent) AS OtherChargesD2
    FROM AgentCollectionDetail o
        INNER JOIN AgentCollection AC
            ON AC.IdAgentCollection = o.IdAgentCollection
    WHERE @ReportCorpType = 1
          AND o.DateofLastChange >= @StartDate
          AND o.DateofLastChange < @EndDate;



    SELECT IdAgent,
           IdCountry,
           t.IdCountryCurrency
    INTO #TransferUnclaimed
    FROM Transfer t
        JOIN CountryCurrency cc
            ON t.IdCountryCurrency = cc.IdCountryCurrency
    WHERE t.IdCountryCurrency = CASE
                                    WHEN @IdCountryCurrency = 0 THEN
                                        t.IdCountryCurrency
                                    ELSE
                                        @IdCountryCurrency
                                END
          AND DateStatusChange > @StartDate
          AND DateStatusChange < @EndDate
          AND IdStatus = 27
          AND
          (
              (
                  @Range1 IS NULL
                  AND @Range2 IS NULL
              )
              OR t.AmountInDollars
          BETWEEN @Range1 AND @Range2
          );



    SELECT IdAgent,
           IdCountry,
           IdCountryCurrency
    INTO #TransferClosedUnclaimed
    FROM dbo.TransferClosed t
    WHERE IdCountryCurrency = CASE
                                  WHEN @IdCountryCurrency = 0 THEN
                                      IdCountryCurrency
                                  ELSE
                                      @IdCountryCurrency
                              END
          AND DateStatusChange > @StartDate
          AND DateStatusChange < @EndDate
          AND IdStatus = 27
          AND
          (
              (
                  @Range1 IS NULL
                  AND @Range2 IS NULL
              )
              OR t.AmountInDollars
          BETWEEN @Range1 AND @Range2
          );

END TRY
BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
END CATCH;





@codigo2 =  " ------------------------------Calculate OutPut --------------------------------------------------
    SELECT A.*,
           B.NumTrans1,
           B.AmountTrans1,
           B.FxResult1,
           B.AgentcommissionMonthly1,
           B.AgentcommissionRetain1,
           B.IncomeFee1,
           B.FxFee1,
           B.FxFeeM1,
           B.FxFeeR1,
           B.BankCommission1,
           B.PayerCommission1,
           B.CogsTrans1,
           B.DCTr1,
           B.MerchantFee1,
           B.CashDiscount1,
           B.NetFee1,
           C.NumTrans2,
           C.AmountTrans2,
           C.FxResult2,
           C.AgentcommissionMonthly2,
           C.AgentcommissionRetain2,
           C.IncomeFee2,
           C.FxFee2,
           C.FxFeeM2,
           C.FxFeeR2,
           C.BankCommission2,
           C.PayerCommission2,
           C.CogsTrans2,
           C.DCTr2,
           C.MerchantFee2,
           C.CashDiscount2,
           C.NetFee2,
           D.NumTransRej1,
           D.AmountTransRej1,
           D.FxResultRej1,
           D.AgentcommissionMonthlyRej1,
           D.AgentcommissionRetainRej1,
           D.IncomeFeeRej1,
           D.FxFeeRej1,
           D.FxFeeRejM1,
           D.FxFeeRejR1,
           D.BankCommission3,
           D.PayerCommission3,
           D.CogsRej1,
           D.DCTr3,
           D.MerchantFee3,
           D.CashDiscount3,
           D.NetFee3,
           E.NumTrans2Rej,
           E.AmountTrans2Rej,
           E.FxResult2Rej,
           E.AgentcommissionMonthly2Rej,
           E.AgentcommissionRetain2Rej,
           E.IncomeFee2Rej,
           E.FxFee2Rej,
           E.FxFeeM2Rej,
           E.FxFeeR2Rej,
           E.BankCommission4,
           E.PayerCommission4,
           E.CogsRej2,
           E.DCTr4,
           E.MerchantFee4,
           E.CashDiscount4,
           E.NetFee4,
           F.CogsCancel1,
           F.NumCancel1,
           F.AmountCancel1,
           F.FxResultCancel1,
           F.AgentcommissionMonthlyCan1,
           F.AgentcommissionRetainCan1,
           F.FxFeeCan1,
           F.FxFeeCanM1,
           F.FxFeeCanR1,
           F.IncomeFeeCan1,
           F.IncomeFeeCancelLikeReject1,
           F.AgentcommissionRetainCancelLikeReject1,
           F.BankCommission5,
           F.PayerCommission5,
           F.DCTr5,
           F.MerchantFee5,
           F.CashDiscount5,
           F.NetFee5,
           G.CogsCancel2,
           G.NumCancel2,
           G.AmountCancel2,
           G.FxResultCancel2,
           G.AgentcommissionMonthlyCan2,
           G.AgentcommissionRetainCan2,
           G.FxFeeCan2,
           G.FxFeeCanM2,
           G.FxFeeCanR2,
           G.IncomeFeeCan2,
           G.IncomeFeeCancelLikeReject2,
           G.AgentcommissionRetainCancelLikeReject2,
           G.BankCommission6,
           G.PayerCommission6,
           G.DCTr6,
           G.MerchantFee6,
           G.CashDiscount6,
           G.NetFee6,
           H.OtherCharges1,
           H.OtherChargesC1,
           H.OtherChargesD1,
           I.UnclaimedCOGS1,
           I.UnclaimedNumTrans1,
           I.UnclaimedAmount1,
           J.UnclaimedCOGSClosed,
           J.UnclaimedNumTransClosed,
           J.UnclaimedAmountClosed,
           K.OtherCharges2,
           K.OtherChargesC2,
           K.OtherChargesD2
    INTO #Result
    FROM #Temp A
        LEFT JOIN #temp1 B
            ON (A.IdAgent = B.IdAgent)
               AND (A.IdCountry = B.IdCountry)
               AND A.IdCountryCurrency = B.IdCountryCurrency
        LEFT JOIN #temp2 C
            ON (A.IdAgent = C.IdAgent)
               AND (A.IdCountry = C.IdCountry)
               AND A.IdCountryCurrency = C.IdCountryCurrency
        LEFT JOIN #temp3 D
            ON (A.IdAgent = D.IdAgent)
               AND (A.IdCountry = D.IdCountry)
               AND A.IdCountryCurrency = D.IdCountryCurrency
        LEFT JOIN #temp4 E
            ON (A.IdAgent = E.IdAgent)
               AND (A.IdCountry = E.IdCountry)
               AND A.IdCountryCurrency = E.IdCountryCurrency
        LEFT JOIN #temp5 F
            ON (A.IdAgent = F.IdAgent)
               AND (A.IdCountry = F.IdCountry)
               AND A.IdCountryCurrency = F.IdCountryCurrency
        LEFT JOIN #temp6 G
            ON (A.IdAgent = G.IdAgent)
               AND (A.IdCountry = G.IdCountry)
               AND A.IdCountryCurrency = G.IdCountryCurrency
        LEFT JOIN #temp7 H
            ON (A.IdAgent = H.IdAgent) --other charges
        LEFT JOIN #temp8 I
            ON (A.IdAgent = I.IdAgent)
               AND (A.IdCountry = I.IdCountry)
               AND A.IdCountryCurrency = I.IdCountryCurrency
        LEFT JOIN #temp9 J
            ON (A.IdAgent = J.IdAgent)
               AND (A.IdCountry = J.IdCountry)
               AND A.IdCountryCurrency = J.IdCountryCurrency
        LEFT JOIN #temp10 K
            ON (A.IdAgent = K.IdAgent); --other charges
   
    UPDATE #Result
    SET NumTrans = COALESCE(NumTrans1, 0) + COALESCE(NumTrans2, 0),
        NumCancel = COALESCE(NumCancel1, 0) + COALESCE(NumCancel2, 0) + COALESCE(NumTransRej1, 0)
                    + COALESCE(NumTrans2Rej, 0),
        AmountTrans = COALESCE(AmountTrans1, 0) + COALESCE(AmountTrans2, 0),
        AmountCancel = COALESCE(AmountCancel1, 0) + COALESCE(AmountCancel2, 0) + COALESCE(AmountTransRej1, 0)
                       + COALESCE(AmountTrans2Rej, 0),
        OtherCharges = COALESCE(OtherCharges1, 0) + COALESCE(OtherCharges2, 0),
        OtherChargesD = COALESCE(OtherChargesD1, 0) + COALESCE(OtherChargesD2, 0),
        OtherChargesC = COALESCE(OtherChargesC1, 0) + COALESCE(OtherChargesC2, 0),
        CogsCancel = COALESCE(CogsCancel1, 0) + COALESCE(CogsCancel2, 0) + COALESCE(CogsRej1, 0)
                     + COALESCE(CogsRej2, 0),
        FxResult = COALESCE(FxResult1, 0) + COALESCE(FxResult2, 0) - COALESCE(FxResultRej1, 0)
                   - COALESCE(FxResult2Rej, 0) - COALESCE(FxResultCancel1, 0) - COALESCE(FxResultCancel2, 0),
        AgentcommissionMonthly = COALESCE(AgentcommissionMonthly1, 0) + COALESCE(AgentcommissionMonthly2, 0)
                                 - COALESCE(AgentcommissionMonthlyRej1, 0) - COALESCE(AgentcommissionMonthly2Rej, 0)
                                 - COALESCE(AgentcommissionMonthlyCan1, 0) - COALESCE(AgentcommissionMonthlyCan2, 0),
        AgentcommissionRetain = COALESCE(AgentcommissionRetain1, 0) + COALESCE(AgentcommissionRetain2, 0)
                                - COALESCE(AgentcommissionRetainRej1, 0) - COALESCE(AgentcommissionRetain2Rej, 0)
                                - COALESCE(AgentcommissionRetainCan1, 0) - COALESCE(AgentcommissionRetainCan2, 0)
                                - COALESCE(AgentcommissionRetainCancelLikeReject1, 0)
                                - COALESCE(AgentcommissionRetainCancelLikeReject2, 0),
        FxFee = COALESCE(FxFee1, 0) + COALESCE(FxFee2, 0) - COALESCE(FxFeeRej1, 0) - COALESCE(FxFee2Rej, 0),
        FxFeeM = COALESCE(FxFeeM1, 0) + COALESCE(FxFeeM2, 0) - COALESCE(FxFeeRejM1, 0) - COALESCE(FxFeeM2Rej, 0),
        FxFeeR = COALESCE(FxFeeR1, 0) + COALESCE(FxFeeR2, 0) - COALESCE(FxFeeRejR1, 0) - COALESCE(FxFeeR2Rej, 0),
        UnclaimedNumTrans = COALESCE(UnclaimedNumTrans1, 0) + COALESCE(UnclaimedNumTransClosed, 0),
        UnclaimedAmount = COALESCE(UnclaimedAmount1, 0) + COALESCE(UnclaimedAmountClosed, 0),
        UnclaimedCOGS = COALESCE(UnclaimedCOGS1, 0) + COALESCE(UnclaimedCOGSClosed, 0),
        BankCommission = COALESCE(BankCommission1, 0) + COALESCE(BankCommission2, 0) - COALESCE(BankCommission3, 0)
                         - COALESCE(BankCommission4, 0) - COALESCE(BankCommission5, 0) - COALESCE(BankCommission6, 0),
        PayerCommission = COALESCE(PayerCommission1, 0) + COALESCE(PayerCommission2, 0) - COALESCE(PayerCommission3, 0)
                          - COALESCE(PayerCommission4, 0) - COALESCE(PayerCommission5, 0)
                          - COALESCE(PayerCommission6, 0),
        IncomeFee = COALESCE(IncomeFee1, 0) + COALESCE(IncomeFee2, 0),
        NetFee = (COALESCE(IncomeFee1, 0) + COALESCE(IncomeFee2, 0))
                 - (COALESCE(IncomeFeeRej1, 0) + COALESCE(IncomeFee2Rej, 0) + COALESCE(IncomeFeeCan1, 0)
                    + COALESCE(IncomeFeeCan2, 0)
                   )
                 - ((COALESCE(CashDiscount1, 0) + COALESCE(CashDiscount2, 0))
                    - (COALESCE(CashDiscount3, 0) + COALESCE(CashDiscount4, 0))
                    - (COALESCE(CashDiscount5, 0) + COALESCE(CashDiscount6, 0))
                   ),
        FeeCanR = COALESCE(IncomeFeeRej1, 0) + COALESCE(IncomeFee2Rej, 0) + COALESCE(IncomeFeeCan1, 0)
                  + COALESCE(IncomeFeeCan2, 0),
        CashDiscount = (COALESCE(CashDiscount1, 0) + COALESCE(CashDiscount2, 0))
                       - (COALESCE(CashDiscount3, 0) + COALESCE(CashDiscount4, 0))
                       - (COALESCE(CashDiscount5, 0) + COALESCE(CashDiscount6, 0)),
        DCTran = COALESCE(DCTr1, 0) + COALESCE(DCTr2, 0),
        MerchantFee = COALESCE(MerchantFee1, 0) + COALESCE(MerchantFee2, 0);
     
    IF @Type = 1
    BEGIN
        UPDATE #Result
        SET AgentcommissionMonthly = AgentcommissionMonthly - FxFeeM
        WHERE AgentcommissionMonthly > 0;
 
        UPDATE #Result
        SET AgentcommissionRetain = AgentcommissionRetain - FxFeeR
        WHERE AgentcommissionRetain > 0;
    END;
    ELSE
    BEGIN
        UPDATE #Result
        SET AgentcommissionMonthly = AgentcommissionMonthly - FxFeeM,
            AgentcommissionRetain = AgentcommissionRetain - FxFeeR;
    END;
  
    UPDATE #Result
    SET NumNet = NumTrans - NumCancel,
        AmountNet = AmountTrans - AmountCancel,
        Result = FxResult + NetFee - AgentcommissionMonthly - AgentcommissionRetain - FxFee - PayerCommission
                 + UnclaimedAmount - UnclaimedCOGS - MerchantFee; ---BankCommission
    UPDATE #Result
    SET CogsNet = AmountNet - FxResult;
    UPDATE #Result
    SET OtherCharges = 0
    WHERE OtherCharges IS NULL;
    UPDATE #Result
    SET OtherChargesD = 0
    WHERE OtherChargesD IS NULL;
    UPDATE #Result
    SET OtherChargesC = 0
    WHERE OtherChargesC IS NULL;
    UPDATE #Result
    SET NetResult = Result + OtherCharges,
        CogsTrans = CogsCancel + CogsNet;
   
    ---------------------------------------------- Calculo de Other Products
    CREATE TABLE #tOtherProd
    (
        [idAgent] INT,
        [AgentName] VARCHAR(100),
        [AgentCode] VARCHAR(50),
        [Total] INT,
        [CancelsTotal] INT,
        [TotalNet] INT,
        [Amount] MONEY,
        [CGS] MONEY,
        [Fee] MONEY,
        [FeeM] MONEY,
        [FeeR] MONEY,
        [ProviderComm] MONEY,
        [CorpCommission] MONEY,
        [AgentCommMonthly] MONEY,
        [AgentCommRetain] MONEY,
        [FX] MONEY,
        [CheckFees] MONEY,      /*2015-Ago-15*/
        [ReturnedFee] MONEY,
        [TransactionFee] MONEY, /*2015-Sep-21*/
        [CustomerFee] MONEY,    /*2015-Sep-21*/
        [ProccessingFee] MONEY, /*2020-Jul*/
        [ScannerFee] MONEY      /*2015-Sep-21*/
    );
    
   
    ---------------------------------------------- Calculo DepositAgent
    SELECT IdAgent,
           SUM(DepositAgent) DepositAgent
    INTO #tDepositAgent
    FROM
    (
        SELECT ab.IdAgent,
               ISNULL((SUM(   CASE
                                  WHEN DebitOrCredit = 'Credit' THEN
                                      Amount
                                  ELSE
                                      0
                              END
                          ) - SUM(   CASE
                                         WHEN DebitOrCredit = 'Debit' THEN
                                             Amount
                                         ELSE
                                             0
                                     END
                                 )
                      ) * FactorNew,
                      0
                     ) DepositAgent
        FROM #TempAgents
            INNER JOIN AgentBalance ab
                ON ab.IdAgent = #TempAgents.IdAgent
            INNER JOIN Agent ag
                ON ab.IdAgent = ag.IdAgent
                   AND ag.IdAgentBankDeposit NOT IN ( 42, 43, 46 )
            LEFT JOIN #bankcommission bc
                ON bc.DateOfBankCommission = CAST(DATEADD(dd, - (DAY(DateOfMovement) - 1), DateOfMovement) AS DATE)
        WHERE ab.TypeOfMovement = 'DEP'
              AND DateOfMovement >= @StartDate
              AND DateOfMovement < @EndDate
        GROUP BY ab.IdAgent,
                 bc.FactorNew
    ) cteD
    GROUP BY IdAgent;
    ---------------------------------------------- Calculo DepositAgent
   
    ------------------------------Output --------------------------------------------------
    SELECT t.IdAgent,
           AgentCode,
           AgentName,
           NumTrans,
           NumCancel,                                                                         --No mostrar
           NumNet,
           AmountTrans,
           AmountCancel,
           AmountNet,
           CogsTrans,
           CogsCancel,
           CogsNet,                                                                           --No mostrar
           FxResult,
           IncomeFee,
           t.FeeCanR,
           t.CashDiscount,
           t.NetFee,
           AgentcommissionMonthly,
           AgentcommissionRetain,
           FxFeeM,
           FxFeeR,
           ISNULL(SpecialCommission, 0) SpecialCommission,                                    --No mostrar
                                                                                              ----
           PayerCommission,                                                                   --Cambio en el calculo
                                                                                              ----
           UnclaimedAmount,
           UnclaimedCOGS,
           OtherCharges,
           OtherChargesC,
           OtherChargesD,                                                                     --No mostrar
           Result,
                                                                                              ----
           NetResult - ISNULL(SpecialCommission, 0) NetResult,                                --Cambio en el calculo --Profit
           CASE
               WHEN NumNet != 0 THEN
           (NetResult - ISNULL(SpecialCommission, 0)) / NumNet
               ELSE
                   0
           END Margin,                                                                        --Cambio en el calculo
                                                                                              ----
           ISNULL(UserName, '') Parent,
           SalesRep,                                                                          --No mostrar
           CASE
               WHEN @Type = 2 THEN
                   CASE
                       WHEN ISNULL(c.CountryCode, '') = 'HTI' THEN
                           'HAI'
                       WHEN ISNULL(c.CountryCode, '') = 'PRY' THEN
                           'PAR'
                       ELSE
                           ISNULL(c.CountryCode, '')
                   END
               WHEN @Type = 3 THEN
                   CASE
                       WHEN ISNULL(t.IdCountryCurrency, 0) != 0 THEN
                           CASE
                               WHEN ISNULL(c2.CountryCode, '') = 'HTI' THEN
                                   'HAI' + '/' + ISNULL(cu.CurrencyCode, '')
                               WHEN ISNULL(c2.CountryCode, '') = 'PRY' THEN
                                   'PAR' + '/' + ISNULL(cu.CurrencyCode, '')
                               ELSE
                                   ISNULL(c2.CountryCode, '') + '/' + ISNULL(cu.CurrencyCode, '')
                           END
                       ELSE
                           ''
                   END
               ELSE
                   ''
           END CountryCode,
                                                                                              --------------------
           c.CountryName,
           (AgentcommissionMonthly + AgentcommissionRetain + FxFeeM + FxFeeR + ISNULL(SpecialCommission, 0))
           + OtherChargesC - OtherChargesD CommSeller,
           DepositAgent BkFeesSeller,
           [OtherProducts] OtherProductsSeller,
           (FxResult + NetFee)
           - ((AgentcommissionMonthly + AgentcommissionRetain + FxFeeM + FxFeeR + ISNULL(SpecialCommission, 0))
              + OtherChargesC - OtherChargesD
             ) - PayerCommission - DepositAgent + [OtherProducts] - MerchantFee ProfitSeller, ---W2+X2
           CASE
               WHEN ISNULL(NumNet, 0) > 0 THEN
           ((FxResult + NetFee)
            - ((AgentcommissionMonthly + AgentcommissionRetain + FxFeeM + FxFeeR + ISNULL(SpecialCommission, 0))
               + OtherChargesC - OtherChargesD
              ) - PayerCommission - DepositAgent + [OtherProducts] - MerchantFee
           )
           / NumNet
               ELSE
                   0
           END MarginSeller,
           t.DCTran AS DCTran,
           t.MerchantFee
 
    --------------------
    FROM
    (
        SELECT #Result.IdAgent,
               IdCountry,
               IdCountryCurrency,
               #Result.AgentCode,
               #Result.AgentName,
               NumTrans,
               NumCancel,
               NumNet,
               AmountTrans,
               AmountCancel,
               AmountNet,
               CogsTrans,
               CogsCancel,
               CogsNet,
               FxResult,
               IncomeFee,
               AgentcommissionMonthly,
               AgentcommissionRetain,
               FxFeeM,
               FxFeeR,
               CASE
                   WHEN PayerCommission > 0 THEN
                       PayerCommission
                   ELSE
                       0
               END AS PayerCommission,
               UnclaimedAmount,
               UnclaimedCOGS,
               OtherCharges,
               OtherChargesC,
               OtherChargesD,
               Result,
               FxResult + NetFee - AgentcommissionMonthly - AgentcommissionRetain - FxFeeM - FxFeeR
               - CASE
                     WHEN PayerCommission > 0 THEN
                         PayerCommission
                     ELSE
                         0
                 END - UnclaimedAmount + UnclaimedCOGS - OtherChargesC + OtherChargesD - MerchantFee AS NetResult,
               (
                   SELECT IdUserSellerParent FROM Seller WHERE IdUserSeller = IdSalesRep
               ) AS IdUserSellerParent,
               SalesRep,
               BankCommission,
               ISNULL(#tOtherProd.[CorpCommission], 0.0) [OtherProducts],
               ISNULL(#tDepositAgent.[DepositAgent], 0.0) [DepositAgent],
               FeeCanR,
               CashDiscount,
               DCTran,
               NetFee,
               MerchantFee
        FROM #Result
            -- Join with #tOtherProd to get CorpCommission for each agent
            LEFT JOIN #tOtherProd
                ON #Result.IdAgent = #tOtherProd.idAgent
            -- Join with #tDepositAgent to get DepositAgent for each agent
            LEFT JOIN
            (
                SELECT IdAgent,
                       SUM(DepositAgent) AS DepositAgent
                FROM
                (
                    SELECT ab.IdAgent,
                           ISNULL((SUM(   CASE
                                              WHEN DebitOrCredit = 'Credit' THEN
                                                  Amount
                                              ELSE
                                                  0
                                          END
                                      ) - SUM(   CASE
                                                     WHEN DebitOrCredit = 'Debit' THEN
                                                         Amount
                                                     ELSE
                                                         0
                                                 END
                                             )
                                  ) * bc.FactorNew,
                                  0
                                 ) AS DepositAgent
                    FROM #TempAgents
                        INNER JOIN AgentBalance ab
                            ON ab.IdAgent = #TempAgents.IdAgent
                        INNER JOIN Agent ag
                            ON ab.IdAgent = ag.IdAgent
                               AND ag.IdAgentBankDeposit NOT IN ( 42, 43, 46 )
                        LEFT JOIN #bankcommission bc
                            ON bc.DateOfBankCommission = CAST(DATEADD(dd, - (DAY(DateOfMovement) - 1), DateOfMovement) AS DATE)
                    WHERE ab.TypeOfMovement = 'DEP'
                          AND DateOfMovement >= @StartDate
                          AND DateOfMovement < @EndDate
                    GROUP BY ab.IdAgent,
                             bc.FactorNew
                ) cteD
                GROUP BY IdAgent
            ) AS #tDepositAgent
                ON #Result.IdAgent = #tDepositAgent.IdAgent
 
    ----------------------------------------------------
    ) t
        LEFT JOIN Users u
            ON u.IdUser = ISNULL(IdUserSellerParent, 0)
        LEFT JOIN #tempSC s
            ON s.IdAgent = t.IdAgent
        LEFT JOIN Country c
            ON t.IdCountry = c.IdCountry
        LEFT JOIN CountryCurrency cc
            ON t.IdCountryCurrency = cc.IdCountryCurrency
        LEFT JOIN Country c2
            ON c2.IdCountry = cc.IdCountry
        LEFT JOIN Currency cu
            ON cu.IdCurrency = cc.IdCurrency
    ORDER BY AgentCode,
             CASE
                 WHEN @Type = 2 THEN
                     CASE
                         WHEN ISNULL(c.CountryCode, '') = 'HTI' THEN
                             'HAI'
                         WHEN ISNULL(c.CountryCode, '') = 'PRY' THEN
                             'PAR'
                         ELSE
                             ISNULL(c.CountryCode, '')
                     END
                 WHEN @Type = 3 THEN
                     CASE
                         WHEN ISNULL(t.IdCountryCurrency, 0) != 0 THEN
                             CASE
                                 WHEN ISNULL(c2.CountryCode, '') = 'HTI' THEN
                                     'HAI' + '/' + ISNULL(cu.CurrencyCode, '')
                                 WHEN ISNULL(c2.CountryCode, '') = 'PRY' THEN
                                     'PAR' + '/' + ISNULL(cu.CurrencyCode, '')
                                 ELSE
                                     ISNULL(c2.CountryCode, '') + '/' + ISNULL(cu.CurrencyCode, '')
                             END
                         ELSE
                             ''
                     END
                 ELSE
                     ''
             END;"